The Curry Howard isomorphism says that given a programming language with a expressive type system, a correspondence can be defined between propositions with types on the one hand, and proofs and programs on the other. In other words, we can express any mathematical claim as a type whose truth is proven by an instantiation of it. 

This means that a compiler can be used as a proof-checker. If the proof represented by the instantiation was invalid, then compiler should detect that the result does not match the type of the object being instantiated. 
